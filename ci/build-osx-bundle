#!/bin/bash

if [ $# -lt 1 ]; then
    echo "Usage: $0 bundle-dir"
    echo "  example: $0 /tmp/MyApp.app"
    exit 1
fi

set -e

OUTPUT=$1

frameworks=$OUTPUT/Contents/F
resources=$OUTPUT/Contents/Resources
macos=$OUTPUT/Contents/MacOS
wrapper=$macos/Coy
binary=${wrapper}-bin
cellar=$(brew --prefix)/Cellar

rm -rf $OUTPUT
mkdir -p $macos $frameworks $resources

cp -av bin/coyim $binary
cp -av build/mac-bundle/coyim-launcher.sh $wrapper
cp -av build/mac-bundle/Info.plist $OUTPUT/Contents/Info.plist
cp -av build/mac-bundle/coy.icns $resources

chmod a+x $wrapper $binary

rewrite_library() {
  for lib in $(otool -L $1 | grep "^\t$(brew --prefix)" | sed -e 's/^[^\/]*//' -e 's/ .*//'); do
    base=$(basename $lib)
    if [ ! -f $frameworks/$base ] ; then
      cp $lib $frameworks
    fi
    chmod u+w $1
    install_name_tool -change $lib @executable_path/../F/$base $1
    if [ $(basename $1) != $base ] ; then
      rewrite_library $frameworks/$base
    fi
  done
}

for lib in $(otool -L $binary | grep "^\t$(brew --prefix)" | sed -e 's/^[^\/]*//' -e 's/ .*//'); do
  base=$(basename $lib)
  cp $lib $frameworks
  install_name_tool -change $lib @executable_path/../F/$base $binary
  rewrite_library $frameworks/$base
done

pango_lib=$(strings $frameworks/libpango-1.0.0.dylib  | grep usr/local | grep lib)
cp -a $(dirname $pango_lib) $resources

# There is no pango modules anymore
#pango_etc=$(strings $frameworks/libpango-1.0.0.dylib  | grep usr/local | grep etc)
#cp -a $(dirname $pango_etc) $resources
#sed -i".bak" -e 's![^ ]*/\([^/ ]*\) !\1 !' $(find $resources -name pango.modules)

# We neeed pixbuf loaders to support different types of images (it is used for
# rendering icons, for instance)
pixbuf_moddir=$(pkg-config gdk-pixbuf-2.0 --variable=gdk_pixbuf_moduledir)
for loader in $pixbuf_moddir/*.so; do
  cp $loader $frameworks
  rewrite_library $frameworks/$(basename $loader)
done

mkdir -p $resources/lib/gdk-pixbuf-2.0/2.10.0
gdk-pixbuf-query-loaders | sed 's|/usr/local/Cellar/gdk-pixbuf/2.32.1/lib/gdk-pixbuf-2.0/2.10.0/loaders/|../F/|g' \
  > $resources/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache 

# We need immodules to have nice font drawing.
immodules_dir=$(pkg-config gtk+-3.0 --variable=libdir)/gtk-3.0/$(pkg-config gtk+-3.0 --variable=gtk_binary_version)/immodules/
for module in $immodules_dir/*.so; do
  cp $module $frameworks
  rewrite_library $frameworks/$(basename $module)
done

mkdir -p $resources/etc/gtk-3.0
gtk-query-immodules-3.0 \
  | sed 's|/usr/local/Cellar/gtk+3-316/3.16.7/lib/gtk-3.0/3.0.0/immodules/|../F/|g' \
  | sed 's|/usr/local/Cellar/gtk+3-316/3.16.7/share/locale|../Resources/share/locale|g' \
  > $resources/etc/gtk-3.0/gtk.immodules 

# Icons and themes
mkdir -p $resources/share/icons
cp -a $(brew --prefix gnome-icon-theme)/share/icons/* $resources/share/icons
cp -a $(brew --prefix hicolor-icon-theme)/share/icons/* $resources/share/icons

mkdir -p $resources/etc/gtk-3.0
mkdir -p $resources/share/themes
cat > $resources/etc/gtk-3.0/settings.ini << EOF
[Settings]
gtk-theme-name=Adwaita
EOF

#TODO: copy GTK/GLIB/* locales
#mkdir -p $resources/share/locale
#for dir in $(find $cellar -name locale -type d); do
#  cp -a $dir/* $resources/share/locale
#done

# Remove all non en locales
#(
#  cd $resources/share/locale
#  find . ! -path . -type d -maxdepth 1 | grep -v '^\./en' | xargs rm -Rf
#)

# We might need this, but not now
#for lib in $(ls -1 $frameworks); do
#    ../pathrewrite/pathrewrite $frameworks/$lib
#  done
#done

